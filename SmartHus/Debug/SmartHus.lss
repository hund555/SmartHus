
SmartHus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00000a98  00000b2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800208  00800208  00000b34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fe5  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d58  00000000  00000000  00001c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072c  00000000  00000000  00002979  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  000030a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066a  00000000  00000000  00003298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c0  00000000  00000000  00003902  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003cc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
   2:	00 00       	nop
   4:	06 c1       	rjmp	.+524    	; 0x212 <__bad_interrupt>
   6:	00 00       	nop
   8:	04 c1       	rjmp	.+520    	; 0x212 <__bad_interrupt>
   a:	00 00       	nop
   c:	02 c1       	rjmp	.+516    	; 0x212 <__bad_interrupt>
   e:	00 00       	nop
  10:	00 c1       	rjmp	.+512    	; 0x212 <__bad_interrupt>
  12:	00 00       	nop
  14:	fe c0       	rjmp	.+508    	; 0x212 <__bad_interrupt>
  16:	00 00       	nop
  18:	fc c0       	rjmp	.+504    	; 0x212 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	fa c0       	rjmp	.+500    	; 0x212 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f8 c0       	rjmp	.+496    	; 0x212 <__bad_interrupt>
  22:	00 00       	nop
  24:	be c1       	rjmp	.+892    	; 0x3a2 <__vector_9>
  26:	00 00       	nop
  28:	f4 c0       	rjmp	.+488    	; 0x212 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f2 c0       	rjmp	.+484    	; 0x212 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f0 c0       	rjmp	.+480    	; 0x212 <__bad_interrupt>
  32:	00 00       	nop
  34:	ee c0       	rjmp	.+476    	; 0x212 <__bad_interrupt>
  36:	00 00       	nop
  38:	ec c0       	rjmp	.+472    	; 0x212 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ea c0       	rjmp	.+468    	; 0x212 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e8 c0       	rjmp	.+464    	; 0x212 <__bad_interrupt>
  42:	00 00       	nop
  44:	e6 c0       	rjmp	.+460    	; 0x212 <__bad_interrupt>
  46:	00 00       	nop
  48:	e4 c0       	rjmp	.+456    	; 0x212 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e2 c0       	rjmp	.+452    	; 0x212 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e0 c0       	rjmp	.+448    	; 0x212 <__bad_interrupt>
  52:	00 00       	nop
  54:	de c0       	rjmp	.+444    	; 0x212 <__bad_interrupt>
  56:	00 00       	nop
  58:	dc c0       	rjmp	.+440    	; 0x212 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	da c0       	rjmp	.+436    	; 0x212 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d8 c0       	rjmp	.+432    	; 0x212 <__bad_interrupt>
  62:	00 00       	nop
  64:	d6 c0       	rjmp	.+428    	; 0x212 <__bad_interrupt>
  66:	00 00       	nop
  68:	d4 c0       	rjmp	.+424    	; 0x212 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d2 c0       	rjmp	.+420    	; 0x212 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d0 c0       	rjmp	.+416    	; 0x212 <__bad_interrupt>
  72:	00 00       	nop
  74:	ce c0       	rjmp	.+412    	; 0x212 <__bad_interrupt>
  76:	00 00       	nop
  78:	cc c0       	rjmp	.+408    	; 0x212 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ca c0       	rjmp	.+404    	; 0x212 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c8 c0       	rjmp	.+400    	; 0x212 <__bad_interrupt>
  82:	00 00       	nop
  84:	c6 c0       	rjmp	.+396    	; 0x212 <__bad_interrupt>
  86:	00 00       	nop
  88:	c4 c0       	rjmp	.+392    	; 0x212 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c2 c0       	rjmp	.+388    	; 0x212 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c0 c0       	rjmp	.+384    	; 0x212 <__bad_interrupt>
  92:	00 00       	nop
  94:	be c0       	rjmp	.+380    	; 0x212 <__bad_interrupt>
  96:	00 00       	nop
  98:	bc c0       	rjmp	.+376    	; 0x212 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ba c0       	rjmp	.+372    	; 0x212 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b8 c0       	rjmp	.+368    	; 0x212 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b6 c0       	rjmp	.+364    	; 0x212 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b4 c0       	rjmp	.+360    	; 0x212 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b2 c0       	rjmp	.+356    	; 0x212 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b0 c0       	rjmp	.+352    	; 0x212 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ae c0       	rjmp	.+348    	; 0x212 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ac c0       	rjmp	.+344    	; 0x212 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	aa c0       	rjmp	.+340    	; 0x212 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a8 c0       	rjmp	.+336    	; 0x212 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a6 c0       	rjmp	.+332    	; 0x212 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a4 c0       	rjmp	.+328    	; 0x212 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a2 c0       	rjmp	.+324    	; 0x212 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a0 c0       	rjmp	.+320    	; 0x212 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9e c0       	rjmp	.+316    	; 0x212 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9c c0       	rjmp	.+312    	; 0x212 <__bad_interrupt>
  da:	00 00       	nop
  dc:	9a c0       	rjmp	.+308    	; 0x212 <__bad_interrupt>
  de:	00 00       	nop
  e0:	98 c0       	rjmp	.+304    	; 0x212 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	83 01       	movw	r16, r6
  e6:	b3 01       	movw	r22, r6
  e8:	b3 01       	movw	r22, r6
  ea:	b3 01       	movw	r22, r6
  ec:	8f 01       	movw	r16, r30
  ee:	b3 01       	movw	r22, r6
  f0:	9b 01       	movw	r18, r22
  f2:	a7 01       	movw	r20, r14
  f4:	b3 01       	movw	r22, r6
  f6:	b3 01       	movw	r22, r6
  f8:	b3 01       	movw	r22, r6
  fa:	b3 01       	movw	r22, r6
  fc:	b3 01       	movw	r22, r6
  fe:	b3 01       	movw	r22, r6
 100:	b3 01       	movw	r22, r6
 102:	b3 01       	movw	r22, r6
 104:	b3 01       	movw	r22, r6
 106:	b3 01       	movw	r22, r6
 108:	b3 01       	movw	r22, r6
 10a:	b3 01       	movw	r22, r6
 10c:	b3 01       	movw	r22, r6
 10e:	b3 01       	movw	r22, r6
 110:	b3 01       	movw	r22, r6
 112:	b3 01       	movw	r22, r6
 114:	b3 01       	movw	r22, r6
 116:	b3 01       	movw	r22, r6
 118:	b3 01       	movw	r22, r6
 11a:	b3 01       	movw	r22, r6
 11c:	b3 01       	movw	r22, r6
 11e:	b3 01       	movw	r22, r6
 120:	b3 01       	movw	r22, r6
 122:	b3 01       	movw	r22, r6
 124:	b3 01       	movw	r22, r6
 126:	b3 01       	movw	r22, r6
 128:	b3 01       	movw	r22, r6
 12a:	b3 01       	movw	r22, r6
 12c:	b3 01       	movw	r22, r6
 12e:	b3 01       	movw	r22, r6
 130:	b3 01       	movw	r22, r6
 132:	b3 01       	movw	r22, r6
 134:	b3 01       	movw	r22, r6
 136:	b3 01       	movw	r22, r6
 138:	b3 01       	movw	r22, r6
 13a:	b3 01       	movw	r22, r6
 13c:	b3 01       	movw	r22, r6
 13e:	b3 01       	movw	r22, r6
 140:	b3 01       	movw	r22, r6
 142:	b3 01       	movw	r22, r6
 144:	b3 01       	movw	r22, r6
 146:	b3 01       	movw	r22, r6
 148:	b3 01       	movw	r22, r6
 14a:	b3 01       	movw	r22, r6
 14c:	b3 01       	movw	r22, r6
 14e:	b3 01       	movw	r22, r6
 150:	b3 01       	movw	r22, r6
 152:	b3 01       	movw	r22, r6
 154:	b3 01       	movw	r22, r6
 156:	b3 01       	movw	r22, r6
 158:	b3 01       	movw	r22, r6
 15a:	b3 01       	movw	r22, r6
 15c:	b3 01       	movw	r22, r6
 15e:	b3 01       	movw	r22, r6
 160:	b3 01       	movw	r22, r6
 162:	b3 01       	movw	r22, r6
 164:	86 01       	movw	r16, r12
 166:	b3 01       	movw	r22, r6
 168:	b3 01       	movw	r22, r6
 16a:	b3 01       	movw	r22, r6
 16c:	92 01       	movw	r18, r4
 16e:	b3 01       	movw	r22, r6
 170:	9e 01       	movw	r18, r28
 172:	aa 01       	movw	r20, r20
 174:	b3 01       	movw	r22, r6
 176:	b3 01       	movw	r22, r6
 178:	b3 01       	movw	r22, r6
 17a:	b3 01       	movw	r22, r6
 17c:	b3 01       	movw	r22, r6
 17e:	b3 01       	movw	r22, r6
 180:	b3 01       	movw	r22, r6
 182:	b3 01       	movw	r22, r6
 184:	b3 01       	movw	r22, r6
 186:	b3 01       	movw	r22, r6
 188:	b3 01       	movw	r22, r6
 18a:	b3 01       	movw	r22, r6
 18c:	b3 01       	movw	r22, r6
 18e:	b3 01       	movw	r22, r6
 190:	b3 01       	movw	r22, r6
 192:	b3 01       	movw	r22, r6
 194:	b3 01       	movw	r22, r6
 196:	b3 01       	movw	r22, r6
 198:	b3 01       	movw	r22, r6
 19a:	b3 01       	movw	r22, r6
 19c:	b3 01       	movw	r22, r6
 19e:	b3 01       	movw	r22, r6
 1a0:	b3 01       	movw	r22, r6
 1a2:	b3 01       	movw	r22, r6
 1a4:	89 01       	movw	r16, r18
 1a6:	b3 01       	movw	r22, r6
 1a8:	b3 01       	movw	r22, r6
 1aa:	b3 01       	movw	r22, r6
 1ac:	95 01       	movw	r18, r10
 1ae:	b3 01       	movw	r22, r6
 1b0:	a1 01       	movw	r20, r2
 1b2:	ad 01       	movw	r20, r26
 1b4:	b3 01       	movw	r22, r6
 1b6:	b3 01       	movw	r22, r6
 1b8:	b3 01       	movw	r22, r6
 1ba:	b3 01       	movw	r22, r6
 1bc:	b3 01       	movw	r22, r6
 1be:	b3 01       	movw	r22, r6
 1c0:	b3 01       	movw	r22, r6
 1c2:	b3 01       	movw	r22, r6
 1c4:	8c 01       	movw	r16, r24
 1c6:	b3 01       	movw	r22, r6
 1c8:	b3 01       	movw	r22, r6
 1ca:	b3 01       	movw	r22, r6
 1cc:	98 01       	movw	r18, r16
 1ce:	b3 01       	movw	r22, r6
 1d0:	a4 01       	movw	r20, r8
 1d2:	b0 01       	movw	r22, r0

000001d4 <__ctors_end>:
 1d4:	11 24       	eor	r1, r1
 1d6:	1f be       	out	0x3f, r1	; 63
 1d8:	cf ef       	ldi	r28, 0xFF	; 255
 1da:	d1 e2       	ldi	r29, 0x21	; 33
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
 1e4:	12 e0       	ldi	r17, 0x02	; 2
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b2 e0       	ldi	r27, 0x02	; 2
 1ea:	e8 e9       	ldi	r30, 0x98	; 152
 1ec:	fa e0       	ldi	r31, 0x0A	; 10
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	0b bf       	out	0x3b, r16	; 59
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
 1f4:	07 90       	elpm	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	a8 30       	cpi	r26, 0x08	; 8
 1fa:	b1 07       	cpc	r27, r17
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
 1fe:	22 e0       	ldi	r18, 0x02	; 2
 200:	a8 e0       	ldi	r26, 0x08	; 8
 202:	b2 e0       	ldi	r27, 0x02	; 2
 204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
 206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
 208:	ae 30       	cpi	r26, 0x0E	; 14
 20a:	b2 07       	cpc	r27, r18
 20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
 20e:	ee d2       	rcall	.+1500   	; 0x7ec <main>
 210:	41 c4       	rjmp	.+2178   	; 0xa94 <_exit>

00000212 <__bad_interrupt>:
 212:	f6 ce       	rjmp	.-532    	; 0x0 <__vectors>

00000214 <ColumnScan>:
 */ 

#include <avr/io.h>

void ColumnScan()
{
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	1f 92       	push	r1
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
	static int columnCounter = 1;			// Value 1 - 4 represents selected Column
	
	char portBuffer = PORTK & 0b11110000;	// Prevents glitches in bit manipulation, clear all column bits
 21e:	88 e0       	ldi	r24, 0x08	; 8
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	fc 01       	movw	r30, r24
 224:	80 81       	ld	r24, Z
 226:	80 7f       	andi	r24, 0xF0	; 240
 228:	89 83       	std	Y+1, r24	; 0x01
	
	switch (columnCounter)
 22a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 22e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	91 05       	cpc	r25, r1
 236:	a9 f0       	breq	.+42     	; 0x262 <ColumnScan+0x4e>
 238:	83 30       	cpi	r24, 0x03	; 3
 23a:	91 05       	cpc	r25, r1
 23c:	1c f4       	brge	.+6      	; 0x244 <ColumnScan+0x30>
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	39 f0       	breq	.+14     	; 0x250 <ColumnScan+0x3c>
 242:	2a c0       	rjmp	.+84     	; 0x298 <ColumnScan+0x84>
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	91 05       	cpc	r25, r1
 248:	a9 f0       	breq	.+42     	; 0x274 <ColumnScan+0x60>
 24a:	04 97       	sbiw	r24, 0x04	; 4
 24c:	e1 f0       	breq	.+56     	; 0x286 <ColumnScan+0x72>
 24e:	24 c0       	rjmp	.+72     	; 0x298 <ColumnScan+0x84>
	{
		case 1:
		portBuffer |= 0b00000111;			// reset C1
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	87 60       	ori	r24, 0x07	; 7
 254:	89 83       	std	Y+1, r24	; 0x01
		PORTK = portBuffer;
 256:	88 e0       	ldi	r24, 0x08	; 8
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	29 81       	ldd	r18, Y+1	; 0x01
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18
		break;
 260:	1b c0       	rjmp	.+54     	; 0x298 <ColumnScan+0x84>
		case 2:
		portBuffer |= 0b00001011;			// reset C2
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	8b 60       	ori	r24, 0x0B	; 11
 266:	89 83       	std	Y+1, r24	; 0x01
		PORTK = portBuffer;
 268:	88 e0       	ldi	r24, 0x08	; 8
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	29 81       	ldd	r18, Y+1	; 0x01
 26e:	fc 01       	movw	r30, r24
 270:	20 83       	st	Z, r18
		break;
 272:	12 c0       	rjmp	.+36     	; 0x298 <ColumnScan+0x84>
		case 3:
		portBuffer |= 0b00001101;			// reset C3
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	8d 60       	ori	r24, 0x0D	; 13
 278:	89 83       	std	Y+1, r24	; 0x01
		PORTK = portBuffer;
 27a:	88 e0       	ldi	r24, 0x08	; 8
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	29 81       	ldd	r18, Y+1	; 0x01
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
		break;
 284:	09 c0       	rjmp	.+18     	; 0x298 <ColumnScan+0x84>
		case 4:
		portBuffer |= 0b00001110;			// reset C4
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	8e 60       	ori	r24, 0x0E	; 14
 28a:	89 83       	std	Y+1, r24	; 0x01
		PORTK = portBuffer;
 28c:	88 e0       	ldi	r24, 0x08	; 8
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	29 81       	ldd	r18, Y+1	; 0x01
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
		break;
 296:	00 00       	nop
	}
	columnCounter++;
 298:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 29c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2a6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	if (columnCounter > 4)
 2aa:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2ae:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2b2:	05 97       	sbiw	r24, 0x05	; 5
 2b4:	34 f0       	brlt	.+12     	; 0x2c2 <ColumnScan+0xae>
	{
		columnCounter = 1;					// Reset back to first Column
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2be:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
}
 2c2:	00 00       	nop
 2c4:	0f 90       	pop	r0
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <DecodeKey>:



char DecodeKey(char data)
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	1f 92       	push	r1
 2d2:	1f 92       	push	r1
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	8a 83       	std	Y+2, r24	; 0x02
	char key;
	switch (data)
 2da:	8a 81       	ldd	r24, Y+2	; 0x02
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	09 2e       	mov	r0, r25
 2e2:	00 0c       	add	r0, r0
 2e4:	aa 0b       	sbc	r26, r26
 2e6:	bb 0b       	sbc	r27, r27
 2e8:	47 e7       	ldi	r20, 0x77	; 119
 2ea:	50 e0       	ldi	r21, 0x00	; 0
 2ec:	27 e7       	ldi	r18, 0x77	; 119
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	84 1b       	sub	r24, r20
 2f2:	95 0b       	sbc	r25, r21
 2f4:	28 17       	cp	r18, r24
 2f6:	39 07       	cpc	r19, r25
 2f8:	b0 f1       	brcs	.+108    	; 0x366 <DecodeKey+0x9a>
 2fa:	fc 01       	movw	r30, r24
 2fc:	88 27       	eor	r24, r24
 2fe:	ee 58       	subi	r30, 0x8E	; 142
 300:	ff 4f       	sbci	r31, 0xFF	; 255
 302:	8f 4f       	sbci	r24, 0xFF	; 255
 304:	aa c3       	rjmp	.+1876   	; 0xa5a <__tablejump2__>
	{
		case 0b01110111: key = '1'; break;
 306:	81 e3       	ldi	r24, 0x31	; 49
 308:	89 83       	std	Y+1, r24	; 0x01
 30a:	30 c0       	rjmp	.+96     	; 0x36c <DecodeKey+0xa0>
		case 0b10110111: key = '4'; break;
 30c:	84 e3       	ldi	r24, 0x34	; 52
 30e:	89 83       	std	Y+1, r24	; 0x01
 310:	2d c0       	rjmp	.+90     	; 0x36c <DecodeKey+0xa0>
		case 0b11010111: key = '7'; break;
 312:	87 e3       	ldi	r24, 0x37	; 55
 314:	89 83       	std	Y+1, r24	; 0x01
 316:	2a c0       	rjmp	.+84     	; 0x36c <DecodeKey+0xa0>
		case 0b11100111: key = '*'; break;
 318:	8a e2       	ldi	r24, 0x2A	; 42
 31a:	89 83       	std	Y+1, r24	; 0x01
 31c:	27 c0       	rjmp	.+78     	; 0x36c <DecodeKey+0xa0>
		case 0b01111011: key = '2'; break;
 31e:	82 e3       	ldi	r24, 0x32	; 50
 320:	89 83       	std	Y+1, r24	; 0x01
 322:	24 c0       	rjmp	.+72     	; 0x36c <DecodeKey+0xa0>
		case 0b10111011: key = '5'; break;
 324:	85 e3       	ldi	r24, 0x35	; 53
 326:	89 83       	std	Y+1, r24	; 0x01
 328:	21 c0       	rjmp	.+66     	; 0x36c <DecodeKey+0xa0>
		case 0b11011011: key = '8'; break;
 32a:	88 e3       	ldi	r24, 0x38	; 56
 32c:	89 83       	std	Y+1, r24	; 0x01
 32e:	1e c0       	rjmp	.+60     	; 0x36c <DecodeKey+0xa0>
		case 0b11101011: key = '0'; break;
 330:	80 e3       	ldi	r24, 0x30	; 48
 332:	89 83       	std	Y+1, r24	; 0x01
 334:	1b c0       	rjmp	.+54     	; 0x36c <DecodeKey+0xa0>
		case 0b01111101: key = '3'; break;
 336:	83 e3       	ldi	r24, 0x33	; 51
 338:	89 83       	std	Y+1, r24	; 0x01
 33a:	18 c0       	rjmp	.+48     	; 0x36c <DecodeKey+0xa0>
		case 0b10111101: key = '6'; break;
 33c:	86 e3       	ldi	r24, 0x36	; 54
 33e:	89 83       	std	Y+1, r24	; 0x01
 340:	15 c0       	rjmp	.+42     	; 0x36c <DecodeKey+0xa0>
		case 0b11011101: key = '9'; break;
 342:	89 e3       	ldi	r24, 0x39	; 57
 344:	89 83       	std	Y+1, r24	; 0x01
 346:	12 c0       	rjmp	.+36     	; 0x36c <DecodeKey+0xa0>
		case 0b11101101: key = '#'; break;
 348:	83 e2       	ldi	r24, 0x23	; 35
 34a:	89 83       	std	Y+1, r24	; 0x01
 34c:	0f c0       	rjmp	.+30     	; 0x36c <DecodeKey+0xa0>
		case 0b01111110: key = 'A'; break;
 34e:	81 e4       	ldi	r24, 0x41	; 65
 350:	89 83       	std	Y+1, r24	; 0x01
 352:	0c c0       	rjmp	.+24     	; 0x36c <DecodeKey+0xa0>
		case 0b10111110: key = 'B'; break;
 354:	82 e4       	ldi	r24, 0x42	; 66
 356:	89 83       	std	Y+1, r24	; 0x01
 358:	09 c0       	rjmp	.+18     	; 0x36c <DecodeKey+0xa0>
		case 0b11011110: key = 'C'; break;
 35a:	83 e4       	ldi	r24, 0x43	; 67
 35c:	89 83       	std	Y+1, r24	; 0x01
 35e:	06 c0       	rjmp	.+12     	; 0x36c <DecodeKey+0xa0>
		case 0b11101110: key = 'D'; break;
 360:	84 e4       	ldi	r24, 0x44	; 68
 362:	89 83       	std	Y+1, r24	; 0x01
 364:	03 c0       	rjmp	.+6      	; 0x36c <DecodeKey+0xa0>
		default:         key = '.'; break;
 366:	8e e2       	ldi	r24, 0x2E	; 46
 368:	89 83       	std	Y+1, r24	; 0x01
 36a:	00 00       	nop
	}
	return key;
 36c:	89 81       	ldd	r24, Y+1	; 0x01
}
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <ReadRows>:

char ReadRows()
{
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	1f 92       	push	r1
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
	char pinRead = PINK;
 382:	86 e0       	ldi	r24, 0x06	; 6
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	fc 01       	movw	r30, r24
 388:	80 81       	ld	r24, Z
 38a:	89 83       	std	Y+1, r24	; 0x01
	if (pinRead < 0xF0)			// test for a row line going low
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	80 3f       	cpi	r24, 0xF0	; 240
 390:	18 f4       	brcc	.+6      	; 0x398 <ReadRows+0x20>
	{
		return DecodeKey(pinRead);
 392:	89 81       	ldd	r24, Y+1	; 0x01
 394:	9b df       	rcall	.-202    	; 0x2cc <DecodeKey>
 396:	01 c0       	rjmp	.+2      	; 0x39a <ReadRows+0x22>
	}
	return '.';
 398:	8e e2       	ldi	r24, 0x2E	; 46
 39a:	0f 90       	pop	r0
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <__vector_9>:
int index = 0;
char keyPadInput[passwordLenght];
char password[] = "4444";

ISR(PCINT0_vect)
{
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
 3b2:	0f 92       	push	r0
 3b4:	2f 93       	push	r18
 3b6:	3f 93       	push	r19
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	ef 93       	push	r30
 3be:	ff 93       	push	r31
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
	PORTB |= 0b10000000;
 3c8:	85 e2       	ldi	r24, 0x25	; 37
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	25 e2       	ldi	r18, 0x25	; 37
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	f9 01       	movw	r30, r18
 3d2:	20 81       	ld	r18, Z
 3d4:	20 68       	ori	r18, 0x80	; 128
 3d6:	fc 01       	movw	r30, r24
 3d8:	20 83       	st	Z, r18
}
 3da:	00 00       	nop
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	ff 91       	pop	r31
 3e2:	ef 91       	pop	r30
 3e4:	9f 91       	pop	r25
 3e6:	8f 91       	pop	r24
 3e8:	3f 91       	pop	r19
 3ea:	2f 91       	pop	r18
 3ec:	0f 90       	pop	r0
 3ee:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7c005b>
 3f2:	0f 90       	pop	r0
 3f4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7c005f>
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <Init>:

void Init()
{
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
	DDRK |= 0b00001111;		// Use PortK, upper nibble = input (rows), lower nibble = output (columns)
 406:	87 e0       	ldi	r24, 0x07	; 7
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	27 e0       	ldi	r18, 0x07	; 7
 40c:	31 e0       	ldi	r19, 0x01	; 1
 40e:	f9 01       	movw	r30, r18
 410:	20 81       	ld	r18, Z
 412:	2f 60       	ori	r18, 0x0F	; 15
 414:	fc 01       	movw	r30, r24
 416:	20 83       	st	Z, r18
	PORTK |= 0b11110000;	// Enable Pull-up on Row pins (upper nibble)
 418:	88 e0       	ldi	r24, 0x08	; 8
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	28 e0       	ldi	r18, 0x08	; 8
 41e:	31 e0       	ldi	r19, 0x01	; 1
 420:	f9 01       	movw	r30, r18
 422:	20 81       	ld	r18, Z
 424:	20 6f       	ori	r18, 0xF0	; 240
 426:	fc 01       	movw	r30, r24
 428:	20 83       	st	Z, r18
	DDRB |= 0b10100000;		// PB7 is for sensor LED PB6 is sensor
 42a:	84 e2       	ldi	r24, 0x24	; 36
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	24 e2       	ldi	r18, 0x24	; 36
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	f9 01       	movw	r30, r18
 434:	20 81       	ld	r18, Z
 436:	20 6a       	ori	r18, 0xA0	; 160
 438:	fc 01       	movw	r30, r24
 43a:	20 83       	st	Z, r18
	
	DDRH |= (1 << PH4) | (1 << PH5);
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	21 e0       	ldi	r18, 0x01	; 1
 442:	31 e0       	ldi	r19, 0x01	; 1
 444:	f9 01       	movw	r30, r18
 446:	20 81       	ld	r18, Z
 448:	20 63       	ori	r18, 0x30	; 48
 44a:	fc 01       	movw	r30, r24
 44c:	20 83       	st	Z, r18
	
	// Set output to OC0B = PG5, see datasheet 16.9.4 and Arduino MEGA pin configuration: (pin 4)
	DDRG |= (1<<PG5);
 44e:	83 e3       	ldi	r24, 0x33	; 51
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	23 e3       	ldi	r18, 0x33	; 51
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	f9 01       	movw	r30, r18
 458:	20 81       	ld	r18, Z
 45a:	20 62       	ori	r18, 0x20	; 32
 45c:	fc 01       	movw	r30, r24
 45e:	20 83       	st	Z, r18
}
 460:	00 00       	nop
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <Detected_Motion>:

void Detected_Motion()
{
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
	if (!(PINB & (1 << PINB6)))
 470:	83 e2       	ldi	r24, 0x23	; 35
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	fc 01       	movw	r30, r24
 476:	80 81       	ld	r24, Z
 478:	88 2f       	mov	r24, r24
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	80 74       	andi	r24, 0x40	; 64
 47e:	99 27       	eor	r25, r25
 480:	89 2b       	or	r24, r25
 482:	49 f4       	brne	.+18     	; 0x496 <Detected_Motion+0x2e>
	{
		PORTB &= 0b01111111;
 484:	85 e2       	ldi	r24, 0x25	; 37
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	25 e2       	ldi	r18, 0x25	; 37
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	f9 01       	movw	r30, r18
 48e:	20 81       	ld	r18, Z
 490:	2f 77       	andi	r18, 0x7F	; 127
 492:	fc 01       	movw	r30, r24
 494:	20 83       	st	Z, r18
	}
}
 496:	00 00       	nop
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	08 95       	ret

0000049e <Servo_Timer_Init>:

void Servo_Timer_Init()
{
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
	// Compare Output Mode: Fast PWM Mode: Clear OC1A on Compare Match, set OC1A at BOTTOM, non-inverting mode (Table 17-5)
	TCCR1A |= (1<<COM1A1);
 4a6:	80 e8       	ldi	r24, 0x80	; 128
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	20 e8       	ldi	r18, 0x80	; 128
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	f9 01       	movw	r30, r18
 4b0:	20 81       	ld	r18, Z
 4b2:	20 68       	ori	r18, 0x80	; 128
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 83       	st	Z, r18
	
	//Waveform Generation Mode: Mode 8 Fast PWM: WGMn3 = 1 (Table 17-2)
	TCCR1B |= (1 << WGM13);
 4b8:	81 e8       	ldi	r24, 0x81	; 129
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	21 e8       	ldi	r18, 0x81	; 129
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	f9 01       	movw	r30, r18
 4c2:	20 81       	ld	r18, Z
 4c4:	20 61       	ori	r18, 0x10	; 16
 4c6:	fc 01       	movw	r30, r24
 4c8:	20 83       	st	Z, r18
	
	// Clock Select Bit: clk/8 prescaling: CS = 011 : = 1, CS11 = 1 (Table 17-6), frekv. = 50Hz
	TCCR1B |= (1<<CS11);
 4ca:	81 e8       	ldi	r24, 0x81	; 129
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	21 e8       	ldi	r18, 0x81	; 129
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	f9 01       	movw	r30, r18
 4d4:	20 81       	ld	r18, Z
 4d6:	22 60       	ori	r18, 0x02	; 2
 4d8:	fc 01       	movw	r30, r24
 4da:	20 83       	st	Z, r18
	
	ICR1 = 20000;
 4dc:	86 e8       	ldi	r24, 0x86	; 134
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	20 e2       	ldi	r18, 0x20	; 32
 4e2:	3e e4       	ldi	r19, 0x4E	; 78
 4e4:	fc 01       	movw	r30, r24
 4e6:	31 83       	std	Z+1, r19	; 0x01
 4e8:	20 83       	st	Z, r18
}
 4ea:	00 00       	nop
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <ResetPassword>:

void ResetPassword()
{
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	cd b7       	in	r28, 0x3d	; 61
 4f8:	de b7       	in	r29, 0x3e	; 62
	memset(keyPadInput, 0, sizeof(keyPadInput));
 4fa:	44 e0       	ldi	r20, 0x04	; 4
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	8a e0       	ldi	r24, 0x0A	; 10
 504:	92 e0       	ldi	r25, 0x02	; 2
 506:	b1 d2       	rcall	.+1378   	; 0xa6a <memset>
	index = 0;
 508:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__data_end+0x1>
 50c:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__data_end>
}
 510:	00 00       	nop
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <CorrectPassword>:

void CorrectPassword()
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	cd b7       	in	r28, 0x3d	; 61
 51e:	de b7       	in	r29, 0x3e	; 62
 520:	2e 97       	sbiw	r28, 0x0e	; 14
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	f8 94       	cli
 526:	de bf       	out	0x3e, r29	; 62
 528:	0f be       	out	0x3f, r0	; 63
 52a:	cd bf       	out	0x3d, r28	; 61
	PORTH |= (1 << PH5);
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	22 e0       	ldi	r18, 0x02	; 2
 532:	31 e0       	ldi	r19, 0x01	; 1
 534:	f9 01       	movw	r30, r18
 536:	20 81       	ld	r18, Z
 538:	20 62       	ori	r18, 0x20	; 32
 53a:	fc 01       	movw	r30, r24
 53c:	20 83       	st	Z, r18
	OCR1A = 1800;
 53e:	88 e8       	ldi	r24, 0x88	; 136
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	28 e0       	ldi	r18, 0x08	; 8
 544:	37 e0       	ldi	r19, 0x07	; 7
 546:	fc 01       	movw	r30, r24
 548:	31 83       	std	Z+1, r19	; 0x01
 54a:	20 83       	st	Z, r18
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	aa ef       	ldi	r26, 0xFA	; 250
 552:	b4 e4       	ldi	r27, 0x44	; 68
 554:	89 83       	std	Y+1, r24	; 0x01
 556:	9a 83       	std	Y+2, r25	; 0x02
 558:	ab 83       	std	Y+3, r26	; 0x03
 55a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	4a e7       	ldi	r20, 0x7A	; 122
 562:	55 e4       	ldi	r21, 0x45	; 69
 564:	69 81       	ldd	r22, Y+1	; 0x01
 566:	7a 81       	ldd	r23, Y+2	; 0x02
 568:	8b 81       	ldd	r24, Y+3	; 0x03
 56a:	9c 81       	ldd	r25, Y+4	; 0x04
 56c:	eb d1       	rcall	.+982    	; 0x944 <__mulsf3>
 56e:	dc 01       	movw	r26, r24
 570:	cb 01       	movw	r24, r22
 572:	8d 83       	std	Y+5, r24	; 0x05
 574:	9e 83       	std	Y+6, r25	; 0x06
 576:	af 83       	std	Y+7, r26	; 0x07
 578:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 57a:	20 e0       	ldi	r18, 0x00	; 0
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	40 e8       	ldi	r20, 0x80	; 128
 580:	5f e3       	ldi	r21, 0x3F	; 63
 582:	6d 81       	ldd	r22, Y+5	; 0x05
 584:	7e 81       	ldd	r23, Y+6	; 0x06
 586:	8f 81       	ldd	r24, Y+7	; 0x07
 588:	98 85       	ldd	r25, Y+8	; 0x08
 58a:	5b d1       	rcall	.+694    	; 0x842 <__cmpsf2>
 58c:	88 23       	and	r24, r24
 58e:	2c f4       	brge	.+10     	; 0x59a <CorrectPassword+0x82>
		__ticks = 1;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	9a 87       	std	Y+10, r25	; 0x0a
 596:	89 87       	std	Y+9, r24	; 0x09
 598:	3b c0       	rjmp	.+118    	; 0x610 <CorrectPassword+0xf8>
	else if (__tmp > 65535)
 59a:	20 e0       	ldi	r18, 0x00	; 0
 59c:	3f ef       	ldi	r19, 0xFF	; 255
 59e:	4f e7       	ldi	r20, 0x7F	; 127
 5a0:	57 e4       	ldi	r21, 0x47	; 71
 5a2:	6d 81       	ldd	r22, Y+5	; 0x05
 5a4:	7e 81       	ldd	r23, Y+6	; 0x06
 5a6:	8f 81       	ldd	r24, Y+7	; 0x07
 5a8:	98 85       	ldd	r25, Y+8	; 0x08
 5aa:	c8 d1       	rcall	.+912    	; 0x93c <__gesf2>
 5ac:	18 16       	cp	r1, r24
 5ae:	3c f5       	brge	.+78     	; 0x5fe <CorrectPassword+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5b0:	20 e0       	ldi	r18, 0x00	; 0
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	40 e2       	ldi	r20, 0x20	; 32
 5b6:	51 e4       	ldi	r21, 0x41	; 65
 5b8:	69 81       	ldd	r22, Y+1	; 0x01
 5ba:	7a 81       	ldd	r23, Y+2	; 0x02
 5bc:	8b 81       	ldd	r24, Y+3	; 0x03
 5be:	9c 81       	ldd	r25, Y+4	; 0x04
 5c0:	c1 d1       	rcall	.+898    	; 0x944 <__mulsf3>
 5c2:	dc 01       	movw	r26, r24
 5c4:	cb 01       	movw	r24, r22
 5c6:	bc 01       	movw	r22, r24
 5c8:	cd 01       	movw	r24, r26
 5ca:	3f d1       	rcall	.+638    	; 0x84a <__fixunssfsi>
 5cc:	dc 01       	movw	r26, r24
 5ce:	cb 01       	movw	r24, r22
 5d0:	9a 87       	std	Y+10, r25	; 0x0a
 5d2:	89 87       	std	Y+9, r24	; 0x09
 5d4:	0f c0       	rjmp	.+30     	; 0x5f4 <CorrectPassword+0xdc>
 5d6:	80 e9       	ldi	r24, 0x90	; 144
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	9c 87       	std	Y+12, r25	; 0x0c
 5dc:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5de:	8b 85       	ldd	r24, Y+11	; 0x0b
 5e0:	9c 85       	ldd	r25, Y+12	; 0x0c
 5e2:	01 97       	sbiw	r24, 0x01	; 1
 5e4:	f1 f7       	brne	.-4      	; 0x5e2 <CorrectPassword+0xca>
 5e6:	9c 87       	std	Y+12, r25	; 0x0c
 5e8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5ea:	89 85       	ldd	r24, Y+9	; 0x09
 5ec:	9a 85       	ldd	r25, Y+10	; 0x0a
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	9a 87       	std	Y+10, r25	; 0x0a
 5f2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5f4:	89 85       	ldd	r24, Y+9	; 0x09
 5f6:	9a 85       	ldd	r25, Y+10	; 0x0a
 5f8:	89 2b       	or	r24, r25
 5fa:	69 f7       	brne	.-38     	; 0x5d6 <CorrectPassword+0xbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5fc:	13 c0       	rjmp	.+38     	; 0x624 <CorrectPassword+0x10c>
 5fe:	6d 81       	ldd	r22, Y+5	; 0x05
 600:	7e 81       	ldd	r23, Y+6	; 0x06
 602:	8f 81       	ldd	r24, Y+7	; 0x07
 604:	98 85       	ldd	r25, Y+8	; 0x08
 606:	21 d1       	rcall	.+578    	; 0x84a <__fixunssfsi>
 608:	dc 01       	movw	r26, r24
 60a:	cb 01       	movw	r24, r22
 60c:	9a 87       	std	Y+10, r25	; 0x0a
 60e:	89 87       	std	Y+9, r24	; 0x09
 610:	89 85       	ldd	r24, Y+9	; 0x09
 612:	9a 85       	ldd	r25, Y+10	; 0x0a
 614:	9e 87       	std	Y+14, r25	; 0x0e
 616:	8d 87       	std	Y+13, r24	; 0x0d
 618:	8d 85       	ldd	r24, Y+13	; 0x0d
 61a:	9e 85       	ldd	r25, Y+14	; 0x0e
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	f1 f7       	brne	.-4      	; 0x61c <CorrectPassword+0x104>
 620:	9e 87       	std	Y+14, r25	; 0x0e
 622:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2000);
	OCR1A = 500;
 624:	88 e8       	ldi	r24, 0x88	; 136
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	24 ef       	ldi	r18, 0xF4	; 244
 62a:	31 e0       	ldi	r19, 0x01	; 1
 62c:	fc 01       	movw	r30, r24
 62e:	31 83       	std	Z+1, r19	; 0x01
	ResetPassword();
 630:	20 83       	st	Z, r18
 632:	5f df       	rcall	.-322    	; 0x4f2 <ResetPassword>
}
 634:	00 00       	nop
 636:	2e 96       	adiw	r28, 0x0e	; 14
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	f8 94       	cli
 63c:	de bf       	out	0x3e, r29	; 62
 63e:	0f be       	out	0x3f, r0	; 63
 640:	cd bf       	out	0x3d, r28	; 61
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	08 95       	ret

00000648 <WrongPassword>:

void WrongPassword()
{
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
	PORTH |= (1 << PH4);
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	22 e0       	ldi	r18, 0x02	; 2
 656:	31 e0       	ldi	r19, 0x01	; 1
 658:	f9 01       	movw	r30, r18
 65a:	20 81       	ld	r18, Z
 65c:	20 61       	ori	r18, 0x10	; 16
 65e:	fc 01       	movw	r30, r24
 660:	20 83       	st	Z, r18
	ResetPassword();
 662:	47 df       	rcall	.-370    	; 0x4f2 <ResetPassword>
}
 664:	00 00       	nop
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

0000066c <Append>:

void Append(char input)
{
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	1f 92       	push	r1
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
 676:	89 83       	std	Y+1, r24	; 0x01
	keyPadInput[index] = input;
 678:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 67c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x1>
 680:	86 5f       	subi	r24, 0xF6	; 246
 682:	9d 4f       	sbci	r25, 0xFD	; 253
 684:	29 81       	ldd	r18, Y+1	; 0x01
 686:	fc 01       	movw	r30, r24
 688:	20 83       	st	Z, r18
	index++;
 68a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 68e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x1>
 692:	01 96       	adiw	r24, 0x01	; 1
 694:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 698:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
}
 69c:	00 00       	nop
 69e:	0f 90       	pop	r0
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	08 95       	ret

000006a6 <CheckPassword>:

void CheckPassword(unsigned char userInput)
{
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	cd b7       	in	r28, 0x3d	; 61
 6ac:	de b7       	in	r29, 0x3e	; 62
 6ae:	2f 97       	sbiw	r28, 0x0f	; 15
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	f8 94       	cli
 6b4:	de bf       	out	0x3e, r29	; 62
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	cd bf       	out	0x3d, r28	; 61
 6ba:	8f 87       	std	Y+15, r24	; 0x0f
	if (userInput != '*')
 6bc:	8f 85       	ldd	r24, Y+15	; 0x0f
 6be:	8a 32       	cpi	r24, 0x2A	; 42
 6c0:	19 f0       	breq	.+6      	; 0x6c8 <CheckPassword+0x22>
	{
		Append(userInput);
 6c2:	8f 85       	ldd	r24, Y+15	; 0x0f
 6c4:	d3 df       	rcall	.-90     	; 0x66c <Append>
 6c6:	01 c0       	rjmp	.+2      	; 0x6ca <CheckPassword+0x24>
	}
	else
	{
		ResetPassword();
 6c8:	14 df       	rcall	.-472    	; 0x4f2 <ResetPassword>
 6ca:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
	}
	
	if (index != passwordLenght)
 6ce:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x1>
 6d2:	04 97       	sbiw	r24, 0x04	; 4
 6d4:	61 f4       	brne	.+24     	; 0x6ee <CheckPassword+0x48>
 6d6:	44 e0       	ldi	r20, 0x04	; 4
	{
	}
	else if (strncmp(password, keyPadInput, 4) == 0)
 6d8:	50 e0       	ldi	r21, 0x00	; 0
 6da:	6a e0       	ldi	r22, 0x0A	; 10
 6dc:	72 e0       	ldi	r23, 0x02	; 2
 6de:	82 e0       	ldi	r24, 0x02	; 2
 6e0:	92 e0       	ldi	r25, 0x02	; 2
 6e2:	ca d1       	rcall	.+916    	; 0xa78 <strncmp>
 6e4:	89 2b       	or	r24, r25
 6e6:	11 f4       	brne	.+4      	; 0x6ec <CheckPassword+0x46>
	{
		CorrectPassword();
 6e8:	17 df       	rcall	.-466    	; 0x518 <CorrectPassword>
 6ea:	01 c0       	rjmp	.+2      	; 0x6ee <CheckPassword+0x48>
 6ec:	ad df       	rcall	.-166    	; 0x648 <WrongPassword>
	}
	else
	{
		WrongPassword();
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	a8 e4       	ldi	r26, 0x48	; 72
 6f4:	b3 e4       	ldi	r27, 0x43	; 67
 6f6:	89 83       	std	Y+1, r24	; 0x01
 6f8:	9a 83       	std	Y+2, r25	; 0x02
 6fa:	ab 83       	std	Y+3, r26	; 0x03
 6fc:	bc 83       	std	Y+4, r27	; 0x04
 6fe:	20 e0       	ldi	r18, 0x00	; 0
 700:	30 e0       	ldi	r19, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 702:	4a e7       	ldi	r20, 0x7A	; 122
 704:	55 e4       	ldi	r21, 0x45	; 69
 706:	69 81       	ldd	r22, Y+1	; 0x01
 708:	7a 81       	ldd	r23, Y+2	; 0x02
 70a:	8b 81       	ldd	r24, Y+3	; 0x03
 70c:	9c 81       	ldd	r25, Y+4	; 0x04
 70e:	1a d1       	rcall	.+564    	; 0x944 <__mulsf3>
 710:	dc 01       	movw	r26, r24
 712:	cb 01       	movw	r24, r22
 714:	8d 83       	std	Y+5, r24	; 0x05
 716:	9e 83       	std	Y+6, r25	; 0x06
 718:	af 83       	std	Y+7, r26	; 0x07
 71a:	b8 87       	std	Y+8, r27	; 0x08
 71c:	20 e0       	ldi	r18, 0x00	; 0
 71e:	30 e0       	ldi	r19, 0x00	; 0
	if (__tmp < 1.0)
 720:	40 e8       	ldi	r20, 0x80	; 128
 722:	5f e3       	ldi	r21, 0x3F	; 63
 724:	6d 81       	ldd	r22, Y+5	; 0x05
 726:	7e 81       	ldd	r23, Y+6	; 0x06
 728:	8f 81       	ldd	r24, Y+7	; 0x07
 72a:	98 85       	ldd	r25, Y+8	; 0x08
 72c:	8a d0       	rcall	.+276    	; 0x842 <__cmpsf2>
 72e:	88 23       	and	r24, r24
 730:	2c f4       	brge	.+10     	; 0x73c <CheckPassword+0x96>
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
 736:	9a 87       	std	Y+10, r25	; 0x0a
 738:	89 87       	std	Y+9, r24	; 0x09
 73a:	3b c0       	rjmp	.+118    	; 0x7b2 <CheckPassword+0x10c>
 73c:	20 e0       	ldi	r18, 0x00	; 0
 73e:	3f ef       	ldi	r19, 0xFF	; 255
	else if (__tmp > 65535)
 740:	4f e7       	ldi	r20, 0x7F	; 127
 742:	57 e4       	ldi	r21, 0x47	; 71
 744:	6d 81       	ldd	r22, Y+5	; 0x05
 746:	7e 81       	ldd	r23, Y+6	; 0x06
 748:	8f 81       	ldd	r24, Y+7	; 0x07
 74a:	98 85       	ldd	r25, Y+8	; 0x08
 74c:	f7 d0       	rcall	.+494    	; 0x93c <__gesf2>
 74e:	18 16       	cp	r1, r24
 750:	3c f5       	brge	.+78     	; 0x7a0 <CheckPassword+0xfa>
 752:	20 e0       	ldi	r18, 0x00	; 0
 754:	30 e0       	ldi	r19, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 756:	40 e2       	ldi	r20, 0x20	; 32
 758:	51 e4       	ldi	r21, 0x41	; 65
 75a:	69 81       	ldd	r22, Y+1	; 0x01
 75c:	7a 81       	ldd	r23, Y+2	; 0x02
 75e:	8b 81       	ldd	r24, Y+3	; 0x03
 760:	9c 81       	ldd	r25, Y+4	; 0x04
 762:	f0 d0       	rcall	.+480    	; 0x944 <__mulsf3>
 764:	dc 01       	movw	r26, r24
 766:	cb 01       	movw	r24, r22
 768:	bc 01       	movw	r22, r24
 76a:	cd 01       	movw	r24, r26
 76c:	6e d0       	rcall	.+220    	; 0x84a <__fixunssfsi>
 76e:	dc 01       	movw	r26, r24
 770:	cb 01       	movw	r24, r22
 772:	9a 87       	std	Y+10, r25	; 0x0a
 774:	89 87       	std	Y+9, r24	; 0x09
 776:	0f c0       	rjmp	.+30     	; 0x796 <CheckPassword+0xf0>
 778:	80 e9       	ldi	r24, 0x90	; 144
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	9c 87       	std	Y+12, r25	; 0x0c
 77e:	8b 87       	std	Y+11, r24	; 0x0b
 780:	8b 85       	ldd	r24, Y+11	; 0x0b
 782:	9c 85       	ldd	r25, Y+12	; 0x0c
 784:	01 97       	sbiw	r24, 0x01	; 1
 786:	f1 f7       	brne	.-4      	; 0x784 <CheckPassword+0xde>
 788:	9c 87       	std	Y+12, r25	; 0x0c
 78a:	8b 87       	std	Y+11, r24	; 0x0b
 78c:	89 85       	ldd	r24, Y+9	; 0x09
 78e:	9a 85       	ldd	r25, Y+10	; 0x0a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	9a 87       	std	Y+10, r25	; 0x0a
 794:	89 87       	std	Y+9, r24	; 0x09
 796:	89 85       	ldd	r24, Y+9	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 798:	9a 85       	ldd	r25, Y+10	; 0x0a
 79a:	89 2b       	or	r24, r25
 79c:	69 f7       	brne	.-38     	; 0x778 <CheckPassword+0xd2>
 79e:	13 c0       	rjmp	.+38     	; 0x7c6 <CheckPassword+0x120>
 7a0:	6d 81       	ldd	r22, Y+5	; 0x05
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 7a2:	7e 81       	ldd	r23, Y+6	; 0x06
 7a4:	8f 81       	ldd	r24, Y+7	; 0x07
 7a6:	98 85       	ldd	r25, Y+8	; 0x08
 7a8:	50 d0       	rcall	.+160    	; 0x84a <__fixunssfsi>
 7aa:	dc 01       	movw	r26, r24
 7ac:	cb 01       	movw	r24, r22
 7ae:	9a 87       	std	Y+10, r25	; 0x0a
 7b0:	89 87       	std	Y+9, r24	; 0x09
 7b2:	89 85       	ldd	r24, Y+9	; 0x09
 7b4:	9a 85       	ldd	r25, Y+10	; 0x0a
 7b6:	9e 87       	std	Y+14, r25	; 0x0e
 7b8:	8d 87       	std	Y+13, r24	; 0x0d
 7ba:	8d 85       	ldd	r24, Y+13	; 0x0d
 7bc:	9e 85       	ldd	r25, Y+14	; 0x0e
 7be:	01 97       	sbiw	r24, 0x01	; 1
 7c0:	f1 f7       	brne	.-4      	; 0x7be <CheckPassword+0x118>
 7c2:	9e 87       	std	Y+14, r25	; 0x0e
 7c4:	8d 87       	std	Y+13, r24	; 0x0d
 7c6:	82 e0       	ldi	r24, 0x02	; 2
 7c8:	91 e0       	ldi	r25, 0x01	; 1
	}
	
	_delay_ms(200);
	PORTH &= ~((1 << PH4) | (1 << PH5));
 7ca:	22 e0       	ldi	r18, 0x02	; 2
 7cc:	31 e0       	ldi	r19, 0x01	; 1
 7ce:	f9 01       	movw	r30, r18
 7d0:	20 81       	ld	r18, Z
 7d2:	2f 7c       	andi	r18, 0xCF	; 207
 7d4:	fc 01       	movw	r30, r24
 7d6:	20 83       	st	Z, r18
 7d8:	00 00       	nop
 7da:	2f 96       	adiw	r28, 0x0f	; 15
}
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	f8 94       	cli
 7e0:	de bf       	out	0x3e, r29	; 62
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	cd bf       	out	0x3d, r28	; 61
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	08 95       	ret

000007ec <main>:
 7ec:	cf 93       	push	r28
 7ee:	df 93       	push	r29

int main(void)
{
 7f0:	1f 92       	push	r1
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
	Init();
 7f6:	03 de       	rcall	.-1018   	; 0x3fe <Init>
	OCR1A = 500;
 7f8:	88 e8       	ldi	r24, 0x88	; 136
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	24 ef       	ldi	r18, 0xF4	; 244
 7fe:	31 e0       	ldi	r19, 0x01	; 1
 800:	fc 01       	movw	r30, r24
 802:	31 83       	std	Z+1, r19	; 0x01
	Servo_Timer_Init();
 804:	20 83       	st	Z, r18
 806:	4b de       	rcall	.-874    	; 0x49e <Servo_Timer_Init>
	
	//Sensor interrupt
	PCICR |= (1<<PCIE0);
 808:	88 e6       	ldi	r24, 0x68	; 104
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	28 e6       	ldi	r18, 0x68	; 104
 80e:	30 e0       	ldi	r19, 0x00	; 0
 810:	f9 01       	movw	r30, r18
 812:	20 81       	ld	r18, Z
 814:	21 60       	ori	r18, 0x01	; 1
 816:	fc 01       	movw	r30, r24
 818:	20 83       	st	Z, r18
	PCMSK0 |= (1<<PCINT6);
 81a:	8b e6       	ldi	r24, 0x6B	; 107
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	2b e6       	ldi	r18, 0x6B	; 107
 820:	30 e0       	ldi	r19, 0x00	; 0
 822:	f9 01       	movw	r30, r18
 824:	20 81       	ld	r18, Z
 826:	20 64       	ori	r18, 0x40	; 64
 828:	fc 01       	movw	r30, r24
	
	sei();
	
    while (1) 
    {
		ColumnScan();
 82a:	20 83       	st	Z, r18
 82c:	78 94       	sei
		char temp = ReadRows();
 82e:	f2 dc       	rcall	.-1564   	; 0x214 <ColumnScan>
 830:	a3 dd       	rcall	.-1210   	; 0x378 <ReadRows>
 832:	89 83       	std	Y+1, r24	; 0x01
		//char temp = 5;
		
		if (temp != '.')
 834:	89 81       	ldd	r24, Y+1	; 0x01
		{
			CheckPassword(temp);
 836:	8e 32       	cpi	r24, 0x2E	; 46
 838:	11 f0       	breq	.+4      	; 0x83e <main+0x52>
 83a:	89 81       	ldd	r24, Y+1	; 0x01
		}
		
		Detected_Motion();
 83c:	34 df       	rcall	.-408    	; 0x6a6 <CheckPassword>
 83e:	14 de       	rcall	.-984    	; 0x468 <Detected_Motion>
    }
 840:	f6 cf       	rjmp	.-20     	; 0x82e <main+0x42>

00000842 <__cmpsf2>:
 842:	2f d0       	rcall	.+94     	; 0x8a2 <__fp_cmp>
 844:	08 f4       	brcc	.+2      	; 0x848 <__cmpsf2+0x6>
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	08 95       	ret

0000084a <__fixunssfsi>:
 84a:	57 d0       	rcall	.+174    	; 0x8fa <__fp_splitA>
 84c:	88 f0       	brcs	.+34     	; 0x870 <__fixunssfsi+0x26>
 84e:	9f 57       	subi	r25, 0x7F	; 127
 850:	90 f0       	brcs	.+36     	; 0x876 <__fixunssfsi+0x2c>
 852:	b9 2f       	mov	r27, r25
 854:	99 27       	eor	r25, r25
 856:	b7 51       	subi	r27, 0x17	; 23
 858:	a0 f0       	brcs	.+40     	; 0x882 <__fixunssfsi+0x38>
 85a:	d1 f0       	breq	.+52     	; 0x890 <__fixunssfsi+0x46>
 85c:	66 0f       	add	r22, r22
 85e:	77 1f       	adc	r23, r23
 860:	88 1f       	adc	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	1a f0       	brmi	.+6      	; 0x86c <__fixunssfsi+0x22>
 866:	ba 95       	dec	r27
 868:	c9 f7       	brne	.-14     	; 0x85c <__fixunssfsi+0x12>
 86a:	12 c0       	rjmp	.+36     	; 0x890 <__fixunssfsi+0x46>
 86c:	b1 30       	cpi	r27, 0x01	; 1
 86e:	81 f0       	breq	.+32     	; 0x890 <__fixunssfsi+0x46>
 870:	5e d0       	rcall	.+188    	; 0x92e <__fp_zero>
 872:	b1 e0       	ldi	r27, 0x01	; 1
 874:	08 95       	ret
 876:	5b c0       	rjmp	.+182    	; 0x92e <__fp_zero>
 878:	67 2f       	mov	r22, r23
 87a:	78 2f       	mov	r23, r24
 87c:	88 27       	eor	r24, r24
 87e:	b8 5f       	subi	r27, 0xF8	; 248
 880:	39 f0       	breq	.+14     	; 0x890 <__fixunssfsi+0x46>
 882:	b9 3f       	cpi	r27, 0xF9	; 249
 884:	cc f3       	brlt	.-14     	; 0x878 <__fixunssfsi+0x2e>
 886:	86 95       	lsr	r24
 888:	77 95       	ror	r23
 88a:	67 95       	ror	r22
 88c:	b3 95       	inc	r27
 88e:	d9 f7       	brne	.-10     	; 0x886 <__fixunssfsi+0x3c>
 890:	3e f4       	brtc	.+14     	; 0x8a0 <__fixunssfsi+0x56>
 892:	90 95       	com	r25
 894:	80 95       	com	r24
 896:	70 95       	com	r23
 898:	61 95       	neg	r22
 89a:	7f 4f       	sbci	r23, 0xFF	; 255
 89c:	8f 4f       	sbci	r24, 0xFF	; 255
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	08 95       	ret

000008a2 <__fp_cmp>:
 8a2:	99 0f       	add	r25, r25
 8a4:	00 08       	sbc	r0, r0
 8a6:	55 0f       	add	r21, r21
 8a8:	aa 0b       	sbc	r26, r26
 8aa:	e0 e8       	ldi	r30, 0x80	; 128
 8ac:	fe ef       	ldi	r31, 0xFE	; 254
 8ae:	16 16       	cp	r1, r22
 8b0:	17 06       	cpc	r1, r23
 8b2:	e8 07       	cpc	r30, r24
 8b4:	f9 07       	cpc	r31, r25
 8b6:	c0 f0       	brcs	.+48     	; 0x8e8 <__fp_cmp+0x46>
 8b8:	12 16       	cp	r1, r18
 8ba:	13 06       	cpc	r1, r19
 8bc:	e4 07       	cpc	r30, r20
 8be:	f5 07       	cpc	r31, r21
 8c0:	98 f0       	brcs	.+38     	; 0x8e8 <__fp_cmp+0x46>
 8c2:	62 1b       	sub	r22, r18
 8c4:	73 0b       	sbc	r23, r19
 8c6:	84 0b       	sbc	r24, r20
 8c8:	95 0b       	sbc	r25, r21
 8ca:	39 f4       	brne	.+14     	; 0x8da <__fp_cmp+0x38>
 8cc:	0a 26       	eor	r0, r26
 8ce:	61 f0       	breq	.+24     	; 0x8e8 <__fp_cmp+0x46>
 8d0:	23 2b       	or	r18, r19
 8d2:	24 2b       	or	r18, r20
 8d4:	25 2b       	or	r18, r21
 8d6:	21 f4       	brne	.+8      	; 0x8e0 <__fp_cmp+0x3e>
 8d8:	08 95       	ret
 8da:	0a 26       	eor	r0, r26
 8dc:	09 f4       	brne	.+2      	; 0x8e0 <__fp_cmp+0x3e>
 8de:	a1 40       	sbci	r26, 0x01	; 1
 8e0:	a6 95       	lsr	r26
 8e2:	8f ef       	ldi	r24, 0xFF	; 255
 8e4:	81 1d       	adc	r24, r1
 8e6:	81 1d       	adc	r24, r1
 8e8:	08 95       	ret

000008ea <__fp_split3>:
 8ea:	57 fd       	sbrc	r21, 7
 8ec:	90 58       	subi	r25, 0x80	; 128
 8ee:	44 0f       	add	r20, r20
 8f0:	55 1f       	adc	r21, r21
 8f2:	59 f0       	breq	.+22     	; 0x90a <__fp_splitA+0x10>
 8f4:	5f 3f       	cpi	r21, 0xFF	; 255
 8f6:	71 f0       	breq	.+28     	; 0x914 <__fp_splitA+0x1a>
 8f8:	47 95       	ror	r20

000008fa <__fp_splitA>:
 8fa:	88 0f       	add	r24, r24
 8fc:	97 fb       	bst	r25, 7
 8fe:	99 1f       	adc	r25, r25
 900:	61 f0       	breq	.+24     	; 0x91a <__fp_splitA+0x20>
 902:	9f 3f       	cpi	r25, 0xFF	; 255
 904:	79 f0       	breq	.+30     	; 0x924 <__fp_splitA+0x2a>
 906:	87 95       	ror	r24
 908:	08 95       	ret
 90a:	12 16       	cp	r1, r18
 90c:	13 06       	cpc	r1, r19
 90e:	14 06       	cpc	r1, r20
 910:	55 1f       	adc	r21, r21
 912:	f2 cf       	rjmp	.-28     	; 0x8f8 <__fp_split3+0xe>
 914:	46 95       	lsr	r20
 916:	f1 df       	rcall	.-30     	; 0x8fa <__fp_splitA>
 918:	08 c0       	rjmp	.+16     	; 0x92a <__fp_splitA+0x30>
 91a:	16 16       	cp	r1, r22
 91c:	17 06       	cpc	r1, r23
 91e:	18 06       	cpc	r1, r24
 920:	99 1f       	adc	r25, r25
 922:	f1 cf       	rjmp	.-30     	; 0x906 <__fp_splitA+0xc>
 924:	86 95       	lsr	r24
 926:	71 05       	cpc	r23, r1
 928:	61 05       	cpc	r22, r1
 92a:	08 94       	sec
 92c:	08 95       	ret

0000092e <__fp_zero>:
 92e:	e8 94       	clt

00000930 <__fp_szero>:
 930:	bb 27       	eor	r27, r27
 932:	66 27       	eor	r22, r22
 934:	77 27       	eor	r23, r23
 936:	cb 01       	movw	r24, r22
 938:	97 f9       	bld	r25, 7
 93a:	08 95       	ret

0000093c <__gesf2>:
 93c:	b2 df       	rcall	.-156    	; 0x8a2 <__fp_cmp>
 93e:	08 f4       	brcc	.+2      	; 0x942 <__gesf2+0x6>
 940:	8f ef       	ldi	r24, 0xFF	; 255
 942:	08 95       	ret

00000944 <__mulsf3>:
 944:	0b d0       	rcall	.+22     	; 0x95c <__mulsf3x>
 946:	78 c0       	rjmp	.+240    	; 0xa38 <__fp_round>
 948:	69 d0       	rcall	.+210    	; 0xa1c <__fp_pscA>
 94a:	28 f0       	brcs	.+10     	; 0x956 <__mulsf3+0x12>
 94c:	6e d0       	rcall	.+220    	; 0xa2a <__fp_pscB>
 94e:	18 f0       	brcs	.+6      	; 0x956 <__mulsf3+0x12>
 950:	95 23       	and	r25, r21
 952:	09 f0       	breq	.+2      	; 0x956 <__mulsf3+0x12>
 954:	5a c0       	rjmp	.+180    	; 0xa0a <__fp_inf>
 956:	5f c0       	rjmp	.+190    	; 0xa16 <__fp_nan>
 958:	11 24       	eor	r1, r1
 95a:	ea cf       	rjmp	.-44     	; 0x930 <__fp_szero>

0000095c <__mulsf3x>:
 95c:	c6 df       	rcall	.-116    	; 0x8ea <__fp_split3>
 95e:	a0 f3       	brcs	.-24     	; 0x948 <__mulsf3+0x4>

00000960 <__mulsf3_pse>:
 960:	95 9f       	mul	r25, r21
 962:	d1 f3       	breq	.-12     	; 0x958 <__mulsf3+0x14>
 964:	95 0f       	add	r25, r21
 966:	50 e0       	ldi	r21, 0x00	; 0
 968:	55 1f       	adc	r21, r21
 96a:	62 9f       	mul	r22, r18
 96c:	f0 01       	movw	r30, r0
 96e:	72 9f       	mul	r23, r18
 970:	bb 27       	eor	r27, r27
 972:	f0 0d       	add	r31, r0
 974:	b1 1d       	adc	r27, r1
 976:	63 9f       	mul	r22, r19
 978:	aa 27       	eor	r26, r26
 97a:	f0 0d       	add	r31, r0
 97c:	b1 1d       	adc	r27, r1
 97e:	aa 1f       	adc	r26, r26
 980:	64 9f       	mul	r22, r20
 982:	66 27       	eor	r22, r22
 984:	b0 0d       	add	r27, r0
 986:	a1 1d       	adc	r26, r1
 988:	66 1f       	adc	r22, r22
 98a:	82 9f       	mul	r24, r18
 98c:	22 27       	eor	r18, r18
 98e:	b0 0d       	add	r27, r0
 990:	a1 1d       	adc	r26, r1
 992:	62 1f       	adc	r22, r18
 994:	73 9f       	mul	r23, r19
 996:	b0 0d       	add	r27, r0
 998:	a1 1d       	adc	r26, r1
 99a:	62 1f       	adc	r22, r18
 99c:	83 9f       	mul	r24, r19
 99e:	a0 0d       	add	r26, r0
 9a0:	61 1d       	adc	r22, r1
 9a2:	22 1f       	adc	r18, r18
 9a4:	74 9f       	mul	r23, r20
 9a6:	33 27       	eor	r19, r19
 9a8:	a0 0d       	add	r26, r0
 9aa:	61 1d       	adc	r22, r1
 9ac:	23 1f       	adc	r18, r19
 9ae:	84 9f       	mul	r24, r20
 9b0:	60 0d       	add	r22, r0
 9b2:	21 1d       	adc	r18, r1
 9b4:	82 2f       	mov	r24, r18
 9b6:	76 2f       	mov	r23, r22
 9b8:	6a 2f       	mov	r22, r26
 9ba:	11 24       	eor	r1, r1
 9bc:	9f 57       	subi	r25, 0x7F	; 127
 9be:	50 40       	sbci	r21, 0x00	; 0
 9c0:	8a f0       	brmi	.+34     	; 0x9e4 <__mulsf3_pse+0x84>
 9c2:	e1 f0       	breq	.+56     	; 0x9fc <__mulsf3_pse+0x9c>
 9c4:	88 23       	and	r24, r24
 9c6:	4a f0       	brmi	.+18     	; 0x9da <__mulsf3_pse+0x7a>
 9c8:	ee 0f       	add	r30, r30
 9ca:	ff 1f       	adc	r31, r31
 9cc:	bb 1f       	adc	r27, r27
 9ce:	66 1f       	adc	r22, r22
 9d0:	77 1f       	adc	r23, r23
 9d2:	88 1f       	adc	r24, r24
 9d4:	91 50       	subi	r25, 0x01	; 1
 9d6:	50 40       	sbci	r21, 0x00	; 0
 9d8:	a9 f7       	brne	.-22     	; 0x9c4 <__mulsf3_pse+0x64>
 9da:	9e 3f       	cpi	r25, 0xFE	; 254
 9dc:	51 05       	cpc	r21, r1
 9de:	70 f0       	brcs	.+28     	; 0x9fc <__mulsf3_pse+0x9c>
 9e0:	14 c0       	rjmp	.+40     	; 0xa0a <__fp_inf>
 9e2:	a6 cf       	rjmp	.-180    	; 0x930 <__fp_szero>
 9e4:	5f 3f       	cpi	r21, 0xFF	; 255
 9e6:	ec f3       	brlt	.-6      	; 0x9e2 <__mulsf3_pse+0x82>
 9e8:	98 3e       	cpi	r25, 0xE8	; 232
 9ea:	dc f3       	brlt	.-10     	; 0x9e2 <__mulsf3_pse+0x82>
 9ec:	86 95       	lsr	r24
 9ee:	77 95       	ror	r23
 9f0:	67 95       	ror	r22
 9f2:	b7 95       	ror	r27
 9f4:	f7 95       	ror	r31
 9f6:	e7 95       	ror	r30
 9f8:	9f 5f       	subi	r25, 0xFF	; 255
 9fa:	c1 f7       	brne	.-16     	; 0x9ec <__mulsf3_pse+0x8c>
 9fc:	fe 2b       	or	r31, r30
 9fe:	88 0f       	add	r24, r24
 a00:	91 1d       	adc	r25, r1
 a02:	96 95       	lsr	r25
 a04:	87 95       	ror	r24
 a06:	97 f9       	bld	r25, 7
 a08:	08 95       	ret

00000a0a <__fp_inf>:
 a0a:	97 f9       	bld	r25, 7
 a0c:	9f 67       	ori	r25, 0x7F	; 127
 a0e:	80 e8       	ldi	r24, 0x80	; 128
 a10:	70 e0       	ldi	r23, 0x00	; 0
 a12:	60 e0       	ldi	r22, 0x00	; 0
 a14:	08 95       	ret

00000a16 <__fp_nan>:
 a16:	9f ef       	ldi	r25, 0xFF	; 255
 a18:	80 ec       	ldi	r24, 0xC0	; 192
 a1a:	08 95       	ret

00000a1c <__fp_pscA>:
 a1c:	00 24       	eor	r0, r0
 a1e:	0a 94       	dec	r0
 a20:	16 16       	cp	r1, r22
 a22:	17 06       	cpc	r1, r23
 a24:	18 06       	cpc	r1, r24
 a26:	09 06       	cpc	r0, r25
 a28:	08 95       	ret

00000a2a <__fp_pscB>:
 a2a:	00 24       	eor	r0, r0
 a2c:	0a 94       	dec	r0
 a2e:	12 16       	cp	r1, r18
 a30:	13 06       	cpc	r1, r19
 a32:	14 06       	cpc	r1, r20
 a34:	05 06       	cpc	r0, r21
 a36:	08 95       	ret

00000a38 <__fp_round>:
 a38:	09 2e       	mov	r0, r25
 a3a:	03 94       	inc	r0
 a3c:	00 0c       	add	r0, r0
 a3e:	11 f4       	brne	.+4      	; 0xa44 <__fp_round+0xc>
 a40:	88 23       	and	r24, r24
 a42:	52 f0       	brmi	.+20     	; 0xa58 <__fp_round+0x20>
 a44:	bb 0f       	add	r27, r27
 a46:	40 f4       	brcc	.+16     	; 0xa58 <__fp_round+0x20>
 a48:	bf 2b       	or	r27, r31
 a4a:	11 f4       	brne	.+4      	; 0xa50 <__fp_round+0x18>
 a4c:	60 ff       	sbrs	r22, 0
 a4e:	04 c0       	rjmp	.+8      	; 0xa58 <__fp_round+0x20>
 a50:	6f 5f       	subi	r22, 0xFF	; 255
 a52:	7f 4f       	sbci	r23, 0xFF	; 255
 a54:	8f 4f       	sbci	r24, 0xFF	; 255
 a56:	9f 4f       	sbci	r25, 0xFF	; 255
 a58:	08 95       	ret

00000a5a <__tablejump2__>:
 a5a:	ee 0f       	add	r30, r30
 a5c:	ff 1f       	adc	r31, r31
 a5e:	88 1f       	adc	r24, r24
 a60:	8b bf       	out	0x3b, r24	; 59
 a62:	07 90       	elpm	r0, Z+
 a64:	f6 91       	elpm	r31, Z
 a66:	e0 2d       	mov	r30, r0
 a68:	19 94       	eijmp

00000a6a <memset>:
 a6a:	dc 01       	movw	r26, r24
 a6c:	01 c0       	rjmp	.+2      	; 0xa70 <memset+0x6>
 a6e:	6d 93       	st	X+, r22
 a70:	41 50       	subi	r20, 0x01	; 1
 a72:	50 40       	sbci	r21, 0x00	; 0
 a74:	e0 f7       	brcc	.-8      	; 0xa6e <memset+0x4>
 a76:	08 95       	ret

00000a78 <strncmp>:
 a78:	fb 01       	movw	r30, r22
 a7a:	dc 01       	movw	r26, r24
 a7c:	41 50       	subi	r20, 0x01	; 1
 a7e:	50 40       	sbci	r21, 0x00	; 0
 a80:	30 f0       	brcs	.+12     	; 0xa8e <strncmp+0x16>
 a82:	8d 91       	ld	r24, X+
 a84:	01 90       	ld	r0, Z+
 a86:	80 19       	sub	r24, r0
 a88:	19 f4       	brne	.+6      	; 0xa90 <strncmp+0x18>
 a8a:	00 20       	and	r0, r0
 a8c:	b9 f7       	brne	.-18     	; 0xa7c <strncmp+0x4>
 a8e:	88 1b       	sub	r24, r24
 a90:	99 0b       	sbc	r25, r25
 a92:	08 95       	ret

00000a94 <_exit>:
 a94:	f8 94       	cli

00000a96 <__stop_program>:
 a96:	ff cf       	rjmp	.-2      	; 0xa96 <__stop_program>
